Description: 
  Template to provision an EC2 Instance with httpd installed.

Parameters:  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro    	

#  InstanceImageId:
#    Description: EC2 Image Id from this region
#    Type: AWS::EC2::Image::Id
#    Default: ami-076e39b6b14e3bb20
    
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-04bf6dcdc9ab498ca
    us-west-1:
      AMI: ami-000279759c4819ddf
    eu-west-1:
      AMI: ami-014ce76919b528bff
    ap-southeast-2:
      AMI: ami-06ce513624b435a22
    ap-northeast-1:
      AMI: ami-034968955444c1fd9

Resources:

  EC2CloudwatchIAMRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: [!Ref EC2CloudwatchIAMRole]        
        

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http and ssh to client host 
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  
          
  Ec2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
              git: []
              awslogs: []
          files:
            "/home/ec2-user/configure-webserver.sh":
              content: !Sub |
                  #!/bin/bash
                  git clone https://github.com/cloudacademy/static-website-example.git
                  cp -r static-website-example/* /var/www/html/
                  sed -i 's/us-east-1/ap-southeast-2/g' /etc/awslogs/awscli.conf
                  sed -i '/^log_group_name/d' /etc/awslogs/awslogs.conf
                  sed -i '$s/$/\nlog_group_name = httpd/' /etc/awslogs/awslogs.conf
                  service awslogsd start
                  systemctl enable awslogsd    
              mode: '000500'
              owner: root
              group: root
          commands:
            1-install-servces:
              command: !Sub |
               /home/ec2-user/configure-webserver.sh
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'

    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI    
      IamInstanceProfile: !Ref EC2InstanceProfile  
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: '30'
            DeleteOnTermination: 'true'
            Encrypted: 'true'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
           yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v -s ${AWS::StackName} -r Ec2Instance --region ${AWS::Region}
          { /home/ec2-user/configure-webserver.sh }
          
      SecurityGroups:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: Web Server
        - Key: Type
          Value: Web Server Instance
          
  IPAddress:
    Type: AWS::EC2::EIP
  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'Ec2Instance'
      EIP: !Ref 'IPAddress'
      
Outputs:
  InstanceId:
    Description: InstanceId of the EC2 instance
    Value: !Ref Ec2Instance
  PublicIP:
    Description: Public IP address of the EC2 instance
    Value: !GetAtt 
      - Ec2Instance
      - PublicIp
